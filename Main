local _Version_ = "0.0.36v [Beta]"

local placeId = game.PlaceId

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
	Name = "Ducky-Hub " .. _Version_,
	Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
	LoadingTitle = "Ducky-Hub",
	LoadingSubtitle = "Welcome!",
	Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

	DisableRayfieldPrompts = false,
	DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil, -- Create a custom folder for your hub/game
		FileName = "DuckyHubConfigs"
	},

	Discord = {
		Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
		Invite = "P49rCFQ7FX", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
		RememberJoins = true -- Set this to false to make them join the discord every time they load it up
	},

	KeySystem = true, -- Set this to true to use our key system
	KeySettings = {
		Title = "Ducky-Hub",
		Subtitle = "Key System",
		Note = "Join our discord to get the key! (https://discord.gg/P49rCFQ7FX)", -- Use this to tell the user how to get a key
		FileName = "Key_DUCKY_HUB", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = {"test"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
	}
})

-- SERVICES

local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- VALUES

local Setting_AutoVoidChest = false
local Setting_AutoInfinityChest = false
local Setting_AutoGiantChest = false
local Setting_AutoFreeWheelSpin = false
local Setting_AutoSpinWheel = false
local Setting_AutoClaimPlaytime = false
local Setting_AutoBlowBubble = false
local Setting_AutoSellBubble = false
local Setting_AutoBuyAlienShop = false
local Setting_AutoBuyBlackmarketItems = false
local Setting_SilentAutoPickupables = false
local Setting_IslandSpawnNotifications = false
local Setting_TeleportToPickupables = false

-- MAIN WHILE LOOP

local Loop = task.spawn(function()
	while true do

		if Setting_AutoVoidChest == true then
			ReplicatedStorage.Shared.Framework.Network.Remote.Event:FireServer("ClaimChest", "Void Chest", true)
		end

		if Setting_AutoInfinityChest == true then
			ReplicatedStorage.Shared.Framework.Network.Remote.Event:FireServer("ClaimChest", "Infinity Chest", true)
		end

		if Setting_AutoGiantChest == true then
			ReplicatedStorage.Shared.Framework.Network.Remote.Event:FireServer("ClaimChest", "Giant Chest", true)
		end
		
		if Setting_AutoFreeWheelSpin == true then
			ReplicatedStorage.Shared.Framework.Network.Remote.Event:FireServer("ClaimFreeWheelSpin")
		end
		
		if Setting_AutoFreeWheelSpin == true then
			ReplicatedStorage.Shared.Framework.Network.Remote.Function:InvokeServer("WheelSpin")
		end
		
		if Setting_AutoClaimPlaytime == true then
			for Index = 1, 9 do
				ReplicatedStorage.Shared.Framework.Network.Remote.Function:InvokeServer("ClaimPlaytime", Index)
			end
		end
		
		if Setting_AutoSellBubble == true then
			ReplicatedStorage.Shared.Framework.Network.Remote.Event:FireServer("SellBubble")
		end
		
		if Setting_AutoBuyBlackmarketItems == true then
			for Index = 1, 3 do
				ReplicatedStorage.Shared.Framework.Network.Remote.Event:FireServer("BuyShopItem", "shard-shop", Index)
			end
		end
		
		if Setting_AutoBuyAlienShop == true then
			for Index = 1, 3 do
				ReplicatedStorage.Shared.Framework.Network.Remote.Event:FireServer("BuyShopItem", "alien-shop", Index)
			end
		end

		task.wait(5)
	end
end)

local Loop_Fast = task.spawn(function()
	while true do
		if Setting_AutoBlowBubble == true then
			ReplicatedStorage.Shared.Framework.Network.Remote.Event:FireServer("BlowBubble")
		end

		task.wait(0.25)
	end
end)

local Loop_PickupablesAuto = task.spawn(function()
	while true do
		if Setting_TeleportToPickupables == true then
			for _, Pickupable in workspace.Rendered:GetChildren()[12]:GetChildren() do
				local Name = Pickupable.Name
				local PickupablePart = Pickupable:FindFirstChildOfClass("Part")
				local PickupableMeshPart = Pickupable:FindFirstChildOfClass("MeshPart")
				
				if PickupablePart then
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = PickupablePart.CFrame + Vector3.new(0, 8, 0)
				elseif PickupableMeshPart then
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = PickupableMeshPart.CFrame + Vector3.new(0, 8, 0)
				end

				wait(1)
			end
		end

		wait(2)
	end
end)

-- FUNCTIONS

local Logs_Hook = "https://discord.com/api/webhooks/1362702270084550780/1TK0CX2K2hy3pVLdzcVLWxY-POhbWi9if-89JZqVWVh0OaS1ykwzBYbtYlkhTq7lDbSj"
local Testing_Hook = "https://discord.com/api/webhooks/1362552545343439081/jvNgkuU4VFETKI-0ZnQfo1-IxDHetD6OU1T7qQPL1HHxaBh4OB_HLjROipa3KNamnvEJ"
local Rare_Islands_Hook = "https://discord.com/api/webhooks/1362693689943654502/zX6vmw-AbGOdn_mm8qtrhnBCZdo6wcmayLZisiqUpszAAT7oUbolA5Ag9LhVYI1WdGhs"


function Message(url, message)
	local http = game:GetService("HttpService")
	local headers = {
		["Content-Type"] = "application/json"
	}
	local data = {
		["content"] = message,
	}

	local body = http:JSONEncode(data)
	local response = request({
		Url = url,
		Method = "POST",
		Headers = headers,
		Body = body
	})
end

function Webhook(url, embed)
	local http = game:GetService("HttpService")
	local headers = {
		["Content-Type"] = "application/json"
	}
	local data = {
		["embeds"] = {
			{
				["title"] = embed.title,
				["description"] = embed.description,
				["color"] = embed.color,
				["fields"] = embed.fields,
				["footer"] = {
					["text"] = embed.footer.text
				}
			}
		}
	}
	local body = http:JSONEncode(data)
	local response = request({
		Url = url,
		Method = "POST",
		Headers = headers,
		Body = body
	})
end

workspace.Rendered.Rifts.ChildAdded:Connect(function(IslandObject)
	if Setting_IslandSpawnNotifications == true then
		task.wait(5)
		
		local IslandName = IslandObject.Name
		local IslandHeight = math.floor(IslandObject.Display.CFrame.Y)
		
		local Luck = nil
		local Timer = IslandObject.Display.SurfaceGui.Timer.Text
		
		if IslandObject.Display.SurfaceGui:FindFirstChild("Icon"):FindFirstChild("Luck") then
			Luck = IslandObject.Display.SurfaceGui:FindFirstChild("Icon"):FindFirstChild("Luck").Text
		end
		
		if game.PrivateServerId == "" then
			if IslandName == "void-egg" or IslandName == "rainbow-egg" or IslandName == "nightmare-egg" or IslandName == "aura-egg" then
				if Luck == "x25" then	
					local Embed = {
						["title"] = "‚ú® Rare Egg Found!",
						["description"] = "",
						["fields"] = {
							{
								["name"] = "ü•ö Egg Name",
								["value"] = "```" .. IslandName .. "```",
							},
							{
								["name"] = "üçÄ Luck Multiplier",
								["value"] = "```" .. Luck .. "```",
							},
							{
								["name"] = "üéà Height",
								["value"] = "```" .. IslandHeight .. "```",
							},
							{
								["name"] = "üîë Server Link",
								["value"] = "```roblox://placeId=" .. tostring(placeId) .. "&gameInstanceId=" .. tostring(game.JobId) .. "```",
							},

						},
						["color"] = 16777215,
						["footer"] = {
							["text"] = tostring(os.date("%H:%M:%S")) 
						},
					}

					Webhook(Testing_Hook, Embed)
				end
			end
		end
	end
end)

workspace.Rendered:GetChildren()[12].ChildAdded:Connect(function(Pickupable)
	if Setting_SilentAutoPickupables == true then
		task.spawn(function()
			local Name = Pickupable.Name
			
			--Pickupable.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame -- maybe?
			ReplicatedStorage.Remotes.Pickups.CollectPickup:FireServer(Name)
			wait(1)
			Pickupable:Destroy()
		end)
	end
end)

-- FARMING TAB

local Tab_Farming = Window:CreateTab("Farming") -- Title, Image
	
	local Section_Bubbles = Tab_Farming:CreateSection("Bubbles")
	
		local Toggle_AutoBubbleBlow = Tab_Farming:CreateToggle({
			Name = "Auto Blow Bubbles",
			CurrentValue = false,
			Flag = "Flag_AutoBubbleBlow", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(Value)
				if Value == true then
					Setting_AutoBlowBubble = true
				elseif Value == false then
					Setting_AutoBlowBubble = false
				end
			end,
		})

		local Toggle_AutoSellBubble = Tab_Farming:CreateToggle({
			Name = "Auto Sell Bubbles",
			CurrentValue = false,
			Flag = "Flag_AutoSellBubble", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(Value)
				if Value == true then
					Setting_AutoSellBubble = true
				elseif Value == false then
					Setting_AutoSellBubble = false
				end
			end,
		})
	
	local Section_Pickupables = Tab_Farming:CreateSection("Pickupables")
	
		local Toggle_SilentAutoPickupables = Tab_Farming:CreateToggle({
			Name = "Silently Pickup Coins & Gems That Spawn Near You",
			CurrentValue = false,	
			Flag = "Flag_SilentAutoPickupables", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(Value)
				if Value == true then
					Setting_SilentAutoPickupables = true
				elseif Value == false then
					Setting_SilentAutoPickupables = false
				end
			end,
		})
		
		local Toggle_TeleportToPickupables = Tab_Farming:CreateToggle({
			Name = "Teleport To Nearby Pickupables [Risky ; More Efficient]",
			CurrentValue = false,	
			Flag = "Flag_TeleportToPickupables", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(Value)
				if Value == true then
					Setting_TeleportToPickupables = true
				elseif Value == false then
					Setting_TeleportToPickupables = false
				end
			end,
		})


	
	local Section_Automatic = Tab_Farming:CreateSection("Chests")
	
		local ChestParagraph = Tab_Farming:CreateParagraph({Title = "Warning!", Content = "Auto chests require buffs mastery level 15 to work!"})

		local Toggle_AutoVoidChest = Tab_Farming:CreateToggle({
			Name = "Auto Void Chest",
			CurrentValue = false,
			Flag = "Flag_AutoVoidChest", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(Value)
				if Value == true then
					Setting_AutoVoidChest = true
				elseif Value == false then
					Setting_AutoVoidChest = false
				end
			end,
		})
				
		local Toggle_AutoGiantChest = Tab_Farming:CreateToggle({
			Name = "Auto Giant Chest",
			CurrentValue = false,
			Flag = "Flag_AutoGiantChest", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(Value)
				if Value == true then
					Setting_AutoGiantChest = true
				elseif Value == false then
					Setting_AutoGiantChest = false
				end
			end,
		})

		local Toggle_AutoInfinityChest = Tab_Farming:CreateToggle({
			Name = "Auto Infinity Chest",
			CurrentValue = false,
			Flag = "Flag_AutoInfinityChest", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(Value)
				if Value == true then
					Setting_AutoInfinityChest = true
				elseif Value == false then
					Setting_AutoInfinityChest = false
				end
			end,
		})
		
		
	local Section_Automatic = Tab_Farming:CreateSection("Rewards")

		local Toggle_AutoFreeWheelSpin = Tab_Farming:CreateToggle({
			Name = "Auto Claim Free Wheel Spin",
			CurrentValue = false,
			Flag = "Flag_AutoFreeWheelSpinClaim", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(Value)
				if Value == true then
					Setting_AutoFreeWheelSpin = true
				elseif Value == false then
					Setting_AutoFreeWheelSpin = false
				end
			end,
		})

		--[[local Toggle_AutoSpinWheel = Tab_Farming:CreateToggle({
			Name = "Auto Spin Wheel",
			CurrentValue = false,
			Flag = "Flag_AutoSpinWheel", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(Value)
				if Value == true then
					Setting_AutoSpinWheel = true
				elseif Value == false then
					Setting_AutoSpinWheel = false
				end
			end,
		})]]
		
		local Toggle_AutoClaimPlaytime = Tab_Farming:CreateToggle({
			Name = "Auto Claim Playtime Rewards",
			CurrentValue = false,
			Flag = "Flag_AutoClaimPlaytime", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(Value)
				if Value == true then
					Setting_AutoClaimPlaytime = true
				elseif Value == false then
					Setting_AutoClaimPlaytime  = false
				end
			end,
		})
		
	local Selection_Shops = Tab_Farming:CreateSection("Shops")
		
		local Toggle_AutoBuyBlackmarket= Tab_Farming:CreateToggle({
			Name = "Auto Buy Blackmarket Items",
			CurrentValue = false,
			Flag = "Flag_AutoBuyBlackmarketItems", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(Value)
				if Value == true then
					Setting_AutoBuyBlackmarketItems = true
				elseif Value == false then
					Setting_AutoBuyBlackmarketItems  = false
				end
			end,
		})
	
		local Toggle_AutoBuyAlienShop = Tab_Farming:CreateToggle({
			Name = "Auto Buy Alien Shop Items",
			CurrentValue = false,
			Flag = "Flag_AutoBuyAlienShop", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(Value)
				if Value == true then
					Setting_AutoBuyAlienShop = true
				elseif Value == false then
					Setting_AutoBuyAlienShop  = false
				end
			end,
		})

		

local Tab_Islands = Window:CreateTab("Islands") -- Title, Image
	
	local Section_Notifications = Tab_Islands:CreateSection("Notifications")
	
		local Toggle_IslandSpawnNotifications = Tab_Islands:CreateToggle({
			Name = "Get Notifications When New Islands Appear",
			CurrentValue = false,
			Flag = "Flag_IslandSpawnNotifications", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(Value)
				if Value == true then
					Setting_IslandSpawnNotifications = true
				elseif Value == false then
					Setting_IslandSpawnNotifications  = false
				end
			end,
		})


local Tab_Misc = Window:CreateTab("Misc") -- Title, Image

	local Section_Unlockables = Tab_Misc:CreateSection("Unlockables")
			
	local Button_UnlockIslands = Tab_Misc:CreateButton({
			Name = "Unlock All Islands",
			Callback = function()
				for _, IslandFolders in workspace.Worlds["The Overworld"].Islands:GetChildren() do
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = IslandFolders.Island.UnlockHitbox.CFrame
					task.wait(0.5)
				end
			end,
	})
	
	local Section_Info = Tab_Misc:CreateSection("Info")
	
	local DiscordParagraph = Tab_Misc:CreateParagraph({Title = "Discord Server", Content = "https://discord.gg/P49rCFQ7FX"})
	local VersionParagraph = Tab_Misc:CreateParagraph({Title = "Script Version", Content = _Version_})


Message(Logs_Hook, tostring(os.date("%H:%M:%S"))  .. " - Launched by: " .. game.Players.LocalPlayer.Name)
Rayfield:LoadConfiguration()
